// @ts-check

/**
 * Type definitions for OSRS Farming data structures
 * These types mirror the JSON data generated by the fetch script
 */

export interface Crop {
  id: string;
  name: string;
  type: 'allotment' | 'flower' | 'tree' | 'herb';
  seedId: number;
  seedName: string;
  
  // Growth properties
  growthTime?: number; // minutes
  farmingLevel?: number;
  
  // Payment requirements
  protection?: {
    type: 'crop' | 'item';
    quantity: number;
    item: string;
  };
  
  // Yield information
  baseYield?: number;
  yieldRange?: [number, number];
  
  // Experience
  plantingXP?: number;
  harvestXP?: number;
  
  // Wiki integration
  wikiUrl: string;
  lastUpdated: string;
  error?: string; // If fetch failed
}

export interface FarmingPatch {
  id: string;
  name: string;
  location: string;
  type: 'allotment' | 'flower' | 'tree' | 'herb';
  coordinates: [number, number];
  
  // Accessibility
  requirements?: {
    quest?: string;
    skill?: { name: string; level: number };
  };
  
  // Geographic data for optimization
  region?: string;
  nearbyTeleports: string[];
  walkingTime: number; // seconds from nearest teleport
}

export interface DependencyRelationship {
  directDependencies: string[]; // Crops this crop requires for payment
  supports: string[]; // Crops this crop can be used to pay for
  alternativePayments: string[]; // Alternative payment options
}

export interface YieldCalculation {
  baseYield: number;
  maxYield: number;
  farmingLevel?: number;
  compostBonus?: number;
}

// Data file structure interfaces
export interface CropsData {
  metadata: {
    lastUpdated: string;
    version: string;
    source: string;
  };
  allotments: Crop[];
  flowers: Crop[];
}

export interface DependenciesData {
  metadata: {
    lastUpdated: string;
    description: string;
  };
  relationships: Record<string, DependencyRelationship>;
}

export interface PatchesData {
  metadata: {
    lastUpdated: string;
    description: string;
  };
  locations: FarmingPatch[];
}

export interface YieldTablesData {
  metadata: {
    description: string;
    lastUpdated: string;
  };
  calculations: {
    baseFormula: string;
    compostBonuses: Record<string, number>;
    levelBonuses: {
      description: string;
    };
  };
  crops: Record<string, YieldCalculation>;
}

export interface WikiCacheData {
  itemMappings: Array<[string, { id: number; name: string; examine?: string }]>;
  seedPrices: Record<string, { high: number; low: number }>;
  lastFetch: string;
}

// Main data structure that matches the JSON files
export interface FarmingDatabase {
  crops: CropsData;
  dependencies: DependenciesData;
  patches: PatchesData;
  yieldTables: YieldTablesData;
  cache: WikiCacheData;
}
